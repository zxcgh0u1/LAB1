const express = require("express");
const bodyParser = require("body-parser");
const path = require("path");
const fs = require("fs");
const mongoose = require("mongoose");
const bcrypt = require("bcrypt");
const session = require("express-session");

const app = express();
const PORT = 3000;

// ====== Middleware ======
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname)));

// ====== –°–µ—Å—Å–∏–∏ ======
app.use(session({
    secret: "super-secret-key",
    resave: false,
    saveUninitialized: false,
    cookie: { maxAge: 1000 * 60 * 60 }
}));

// ====== –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB ======
const username = "Egor";
const password = "12345";
const cluster = "cluster0.rvykywl";
const dbname = "Cluster0";

const encodedPassword = encodeURIComponent(password);
const MONGODB_URI = `mongodb+srv://${username}:${encodedPassword}@${cluster}.mongodb.net/${dbname}?retryWrites=true&w=majority`;

async function connectToMongoDB() {
    try {
        console.log("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB...");
        await mongoose.connect(MONGODB_URI, {
            serverSelectionTimeoutMS: 10000,
            socketTimeoutMS: 45000,
        });
        console.log("‚úÖ –£–°–ü–ï–®–ù–û –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB!");
    } catch (error) {
        console.error("‚ùå –û–®–ò–ë–ö–ê –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", error.message);
    }
}
connectToMongoDB();

// ====== –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ======
const userSchema = new mongoose.Schema({
    login: { type: String, required: true, unique: true },
    password: { type: String, required: true }
});
const User = mongoose.model("User", userSchema);

// ====== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ======
app.post("/register", async (req, res) => {
    const { login, password } = req.body;
    try {
        const existingUser = await User.findOne({ login });
        if (existingUser) {
            return res.send(`<h2>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${login} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!</h2><a href="/">–ù–∞–∑–∞–¥</a>`);
        }
        const hashedPassword = await bcrypt.hash(password, 10);
        const newUser = new User({ login, password: hashedPassword });
        await newUser.save();
        res.send(`<h2>‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</h2><a href="/">–í–æ–π—Ç–∏</a>`);
    } catch (err) {
        console.error(err);
        res.status(500).send("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
    }
});

// ====== –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ======
app.post("/login", async (req, res) => {
    const { login, password } = req.body;
    try {
        const user = await User.findOne({ login });
        if (!user) {
            return res.send(`<h2>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</h2><a href="/">–ù–∞–∑–∞–¥</a>`);
        }
        const match = await bcrypt.compare(password, user.password);
        if (!match) {
            return res.send(`<h2>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å</h2><a href="/">–ù–∞–∑–∞–¥</a>`);
        }
        req.session.user = { login: user.login };
        res.redirect("/profile");
    } catch (err) {
        console.error(err);
        res.status(500).send("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
    }
});

// ====== –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ======
app.get("/profile", (req, res) => {
    if (!req.session.user) {
        return res.send(`<h2>‚ö† –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å</h2><a href="/">–í–æ–π—Ç–∏</a>`);
    }
    res.send(`
        <h2>üëã –ü—Ä–∏–≤–µ—Ç, ${req.session.user.login}!</h2>
        <p>–≠—Ç–æ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.</p>
        <a href="/logout">–í—ã–π—Ç–∏</a>
    `);
});

// ====== –í—ã—Ö–æ–¥ ======
app.get("/logout", (req, res) => {
    req.session.destroy(() => res.redirect("/"));
});

// ====== –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å (–∫–æ–Ω—Ç–∞–∫—Ç—ã) ======
app.post("/contact", (req, res) => {
    const { name, email, subject, message } = req.body;
    let data = [];
    if (fs.existsSync("messages.json")) {
        data = JSON.parse(fs.readFileSync("messages.json", "utf8"));
    }
    data.push({ name, email, subject, message, date: new Date().toLocaleString() });
    fs.writeFileSync("messages.json", JSON.stringify(data, null, 2), "utf8");
    res.send(`
        <h2>–°–ø–∞—Å–∏–±–æ, ${name}!</h2>
        <p>–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</p>
        <blockquote>${message}</blockquote>
        <a href="/contacts.html">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥</a>
    `);
});

// ====== –ì–æ—Å—Ç–µ–≤–∞—è –∫–Ω–∏–≥–∞ ======

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
app.post("/guestbook", (req, res) => {
    const review = req.body;
    let reviews = [];
    if (fs.existsSync("guestbook.json")) {
        reviews = JSON.parse(fs.readFileSync("guestbook.json", "utf8"));
    }
    reviews.push({ ...review, date: new Date().toLocaleString() });
    fs.writeFileSync("guestbook.json", JSON.stringify(reviews, null, 2), "utf8");
    res.redirect("/guestbook.html");
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ (JSON –¥–ª—è JS –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ)
app.get("/guestbook-data", (req, res) => {
    let reviews = [];
    if (fs.existsSync("guestbook.json")) {
        reviews = JSON.parse(fs.readFileSync("guestbook.json", "utf8"));
    }
    res.json(reviews);
});

// ====== –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ======
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT}`);
});
// ====== –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤) ======
const products = {
    "–ö–ª–∞—Å—Å–∏–∫–∞ –õ—é–∫—Å": {
        –º–∞—Ç–µ—Ä–∏–∞–ª: "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π –ª–µ–Ω —Å —à–µ–ª–∫–æ–≤–æ–π –Ω–∏—Ç—å—é",
        —Ä–∞–∑–º–µ—Ä—ã: "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ—à–∏–≤",
        —Ü–µ–Ω–∞: "7500 —Ä—É–±.",
        –æ–ø–∏—Å–∞–Ω–∏–µ: "–†–æ—Å–∫–æ—à–Ω—ã–µ —à—Ç–æ—Ä—ã –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞."
    },
    "–ö–ª–∞—Å—Å–∏–∫–∞": {
        –º–∞—Ç–µ—Ä–∏–∞–ª: "–•–ª–æ–ø–æ–∫, –ø–æ–ª–∏—ç—Å—Ç–µ—Ä",
        —Ä–∞–∑–º–µ—Ä—ã: "250x140 —Å–º",
        —Ü–µ–Ω–∞: "4500 —Ä—É–±.",
        –æ–ø–∏—Å–∞–Ω–∏–µ: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —à—Ç–æ—Ä—ã –∏–∑ –ø–ª–æ—Ç–Ω–æ–π —Ç–∫–∞–Ω–∏."
    },
    "–†–∏–º—Å–∫–∏–µ": {
        –º–∞—Ç–µ—Ä–∏–∞–ª: "–õ–µ–Ω, –ø–æ–ª–∏—ç—Å—Ç–µ—Ä",
        —Ä–∞–∑–º–µ—Ä—ã: "–ø–æ –∑–∞–∫–∞–∑—É",
        —Ü–µ–Ω–∞: "5500 —Ä—É–±.",
        –æ–ø–∏—Å–∞–Ω–∏–µ: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∏–º—Å–∫–∏–µ —à—Ç–æ—Ä—ã."
    },
    "–Ø–ø–æ–Ω—Å–∫–∏–µ –ø–∞–Ω–µ–ª–∏": {
        –º–∞—Ç–µ—Ä–∏–∞–ª: "–ü–ª–æ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç–∏–ª—å",
        —Ä–∞–∑–º–µ—Ä—ã: "–ø–æ –∑–∞–∫–∞–∑—É",
        —Ü–µ–Ω–∞: "6800 —Ä—É–±.",
        –æ–ø–∏—Å–∞–Ω–∏–µ: "–ò–¥–µ–∞–ª—å–Ω—ã –¥–ª—è –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤."
    }
};
// ====== –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ ======
app.get("/search", (req, res) => {
    const query = (req.query.q || "").trim().toLowerCase();

    if (!query) {
        return res.send("<h2>–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</h2><a href='/catalog.html'>–ù–∞–∑–∞–¥</a>");
    }

    let results = [];
    for (const [name, details] of Object.entries(products)) {
        if (name.toLowerCase().startsWith(query)) {
            results.push({ name, details });
        }
    }

    if (results.length === 0) {
        return res.send(`<h2>–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${query}"</h2><a href='/catalog.html'>–ù–∞–∑–∞–¥</a>`);
    }

    let html = "<h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</h2>";
    results.forEach(r => {
        html += `<div style="border:1px solid #ccc; padding:10px; margin:10px 0;">
                    <h3>${r.name}</h3>
                    <ul>
                        <li><b>–ú–∞—Ç–µ—Ä–∏–∞–ª:</b> ${r.details.–º–∞—Ç–µ—Ä–∏–∞–ª}</li>
                        <li><b>–†–∞–∑–º–µ—Ä—ã:</b> ${r.details.—Ä–∞–∑–º–µ—Ä—ã}</li>
                        <li><b>–¶–µ–Ω–∞:</b> ${r.details.—Ü–µ–Ω–∞}</li>
                        <li><b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${r.details.–æ–ø–∏—Å–∞–Ω–∏–µ}</li>
                    </ul>
                </div>`;
    });

    html += "<a href='/catalog.html'>‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥</a>";
    res.send(html);
});
